First of all - this project is not a finished command-line application like
c2nim or nimterop, but rather a /framework/ for implementing custom wrapper
scripts. It can be used as one-off tool that you can tweak manually, but it
is mainly designed to provide *fully automatic* wrapper generators for
cases where it is not realistically possible to do it by hand. Re-wrap
whole Qt library on each patch release? Whole posix API? That's what this
project tries to give you. Sophisiticated tool for tackling complex
wrapping problems, with built-in support for documentation, nep-1 style
guide and comprehensive collection of automatic code generation tools.

It is an open secret that C and C++ libraries lack consistent styling, code
policies and more. Sometimes exception are completely banned (or even
simply unaccessible as in C case), different naming styles. Heavy reliance
on the templates or OOP-style C++. All of that forces nim wrapper authors
to spend more time in order to provide higher-level interfaces that take
advantage of the rich nim features (~distinct~ types, exceptions, side
effect tracking and ~enums~).

Hcparse provides framework for adressing this problems in automated way,
using user-provided or built-in tools, that allow you to

- Convert 'out' arguments for C functions to nim ~tuple[]~ returns
- Wrap 'raw' C procedures that return exit codes to raising ones
- Declare callback-based override for C++ classes. No more need to inherit
  from ~DelegatePainter~ just to override single method - you can just set
  callback for it.
- Naming fully compilant with nep-1 style guide. No more awkward
  ~XMapRaised~ that can be confused with type name or ~unordered_set~
- Declare overloads for all constructors, including aggregate
  initialization and 'placement new', that makes it possible to reuse nim
  memory management for C++ objects.
- Convert 'macro enum groups' into full nim enums (~#define PAPI_OK 0~,
  ~#define PAPI_EINVAL -1~)
- Detect and solve import cycles caused by forward declarations and badly
  structured header dependencies.
- Support for default template parameters
- Partial support with varying degree of control for complex C++ 'inner
  typedefs'. Provide graceful fallback for some C++ templating features
  that nim is unable to handle.
- Extensive interoperability with [[https://github.com/haxscramper/haxdoc][haxdoc]] - adapt original documentation to
  your wrappers. No longer user would have to dig through C++ docs in order
  to make sense of what part of the wrapper they need.


NOTE: the project is still considered work-in-progress, but all of the
features mentioned above have already been implemeneted at least in
proof-of-concept quality.
