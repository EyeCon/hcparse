#+title: readme

Higher-level bindings for libclang in nim.

** Installation

#+begin_src bash
nimble install hcparse
#+end_src

This package also requires libclang library installed. On most linux
systems it comes with installation of clang compiler, so most likely
you already have it.

** Usage

#+begin_src nim
  import hcparse/libclang

  # ...
#+end_src

** Links

- [[https://github.com/haxscramper/hcparse][github]]
- [[https://haxscramper.github.io/hcparse-doc/src/hcparse/libclang.html][libclang API wrapper documentation]]
- [[https://haxscramper.github.io/hcparse-doc/wrap-examples.html][WIP wrapper examples - generated from unit tests]]
- [[https://discord.gg/hjfYJCU][discord server]]
- [[https://nimble.directory/pkg/hcparse][nimble package]]

* Overview


This readme provides high-level overview of libclang library and
several helper functions. For comprehensive list of all available
functions with documentation see [[https://haxscramper.github.io/hcparse-doc/src/hcparse/libclang.html][libclang API wrapper documentation]]
and [[https://haxscramper.github.io/hcparse-doc/src/hcparse/libclang_utils.html][utils documentation]]

# Documentation for helper functions <here> provided on top of raw libclang bindings.

Libclang is a stable high-level C interface to clang. It provides
facilities for parsing and introspection of C++ code - iterating
through all AST elements, determining type of particular node, getting
associated documentation comments and so on.

For interaction with AST libclang mostly uses /visitors/ - C callback
function (~{.cdecl.}~ annotation in nim) that don't provide a way to
easily interact with surrounding scope (e.g. no closure or variable
capture). In order to make creating visitors easier helper macro
~makeVisitor~ was introduced - it takes care of all low-level details
of creating callback functions itself and passing user data to
callback via ~pointer~ type. It allows to capture external variables
by reference.

* As a C++ code wrapper tool

This part of the readme is subject to change, and only provides high-level
overview of the intended workflow.

C/C++ library is wrapped as single nimble package with following structure

#+begin_src text
  <project>/
    <project.nimble>
    src/
      <submodule 1> # submodules
      ...
      <submodule n>

      <project.nim> # Main project file
      <project>/
        make_wrap.nim # Wrapper generator script
        make_build.nim # Build script

        <wrapped-file 1.nim> # generated wrapper files
        ...
        <wrapped-file n.nim>
#+end_src

~<project.nimble>~ contains optional ~after install~ task that performs
build of the necessary C/C++ submodules. In it's simplest form task looks
like this:

#+begin_src nim
after install:
  exec("nim c -r <project>/src/build.nim")
#+end_src

* As a library for working with C++ code

#+begin_src nim :exports both
{.define(plainStdout).}
import std/[unittest, decls]
import hmisc/other/[oswrap]
import hcparse

let outfile = AbsFile("/tmp/example.cpp")
outfile.writeFile """
    #include <iostream>

    /// Documentation comments for class
    class MyClass
    {
    public:
      int field;
      virtual void method() const = 0;
      static const int static_field;
      static int static_method();
    };

    /** This is a main function documenation comment */
    int main() {
      1 + 2;
    }
    """


let
  trIndex = createIndex()
  unit = parseTranslationUnit(trIndex, outfile)
  topCursor = unit.getTranslationUnitCursor()

echo unit.isNil
echo topCursor.cxKind

var functionNames: seq[string]
topCursor.visitMainFile do: # Visit all ast elements from main translation unit
  makeVisitor [unit, functionNames]: # Create visitor callback. All
    # captured variables have to be explicitly declared in capture
    # list. Two variables are implicitly injected into callback scope
    # - `cursor` (current AST element being visited) and `parent` -
    # parent node for cursor.
    echo cursor.treeRepr(unit)
    if cursor.cxKind == ckFunctionDecl:
      echo cursor.comment().toNimDoc()
      functionNames.add $cursor

    return cvrContinue

echo "found functions: ", functionNames
#+end_src

#+RESULTS:
#+begin_example
false
TranslationUnit
ClassDecl MyClass:
    +-> type: MyClass
    +-> CXXAccessSpecifier:
    |   +-> type: <invalid>
    |   +-> public :
    +-> FieldDecl:
    |   +-> type: int
    |   +-> int field
    +-> CXXMethod:
    |   +-> type: void () const
    |   +-> virtual void method ( ) const = 0
    +-> VarDecl:
    |   +-> type: const int
    |   +-> static const int static_field
    +-> CXXMethod:
        +-> type: int ()
        +-> static int static_method ( )
FunctionDecl main:
    +-> type: int ()
    +-> CompoundStmt :
        +-> type: <invalid>
        +-> BinaryOperator :
            +-> type: int
            +-> IntegerLiteral:
            |   +-> type: int
            |   +-> 1
            +-> IntegerLiteral:
                +-> type: int
                +-> 2
 This is a main function documenation comment 
found functions: @["main"]
#+end_example


* Contribution & development

Must-have todo things

- [X] Add destructors/finalizers for clang objects - right now none of
  the ~dispose*()~ functions are called. - works on nim devel, fails
  on 1.2.6
- [ ] Support additional annotations for generated documentation - you
  should be able to add own footnotes for any function argument, enum
  value, class etc.

Future plans/goals

- [ ] Provide convenient and stable API for interacting with libclang.
  C API for clang is stable so it is safe to spend more time improving
  user experience with the library without worrying about possible API
  breakage.
- [ ] Create /fully automatic/ binding generator for libtooling - it
  has unstable, but much richer API, enabling full access to all
  internal representation of C++ code, rewriting etc.
- [ ] Maybe adopt some workarounds from [[https://github.com/foonathan/cppast][cppast]]?
- [ ] Create bindings for libtooling
- [ ] Use [[https://github.com/haxscramper/nimtrs][nimtrs]] to generate matcher API calls
  http://clang.llvm.org/docs/LibASTMatchers.html
- [ ] Use nimtrs to provide pattern-based rewriting rules for types.
  Requires implementation of rewriting for differently-typed AST.
