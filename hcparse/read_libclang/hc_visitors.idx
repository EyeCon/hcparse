visitMainFile	hcparse/read_libclang/hc_visitors.html#visitMainFile,CXCursor,tuple[T,proc(CXCursor,CXCursor,pointer)]	hc_visitors: visitMainFile[T](cursor: CXCursor; callback: tuple[data: T, impl: proc (\n    a, b: CXCursor; clientData: pointer): CXChildVisitResult {.cdecl.}])	
getArguments	hcparse/read_libclang/hc_visitors.html#getArguments,CXCursor	hc_visitors: getArguments(cursor: CXCursor): seq[CArg]	
argsSignature	hcparse/read_libclang/hc_visitors.html#argsSignature,seq[CArg],bool,bool,(bool, bool)	hc_visitors: argsSignature(args: seq[CArg]; types: bool = true; names: bool = true;\n              wrap: (bool, bool) = (false, false)): string	
argsSignature	hcparse/read_libclang/hc_visitors.html#argsSignature,CXCursor,bool,bool,(bool, bool)	hc_visitors: argsSignature(cursor: CXCursor; types: bool = true; names: bool = true;\n              wrap: (bool, bool) = (false, false)): string	
visitMethod	hcparse/read_libclang/hc_visitors.html#visitMethod,CXCursor,CScopedIdent,CX_AccessSpecifier,WrapConf	hc_visitors: visitMethod(cursor: CXCursor; parent: CScopedIdent; accs: CX_AccessSpecifier;\n            conf: WrapConf): CDecl	
visitField	hcparse/read_libclang/hc_visitors.html#visitField,CXCursor,CScopedIdent,CX_AccessSpecifier,WrapConf,WrapCache	hc_visitors: visitField(cursor: CXCursor; parent: CScopedIdent; accs: CX_AccessSpecifier;\n           conf: WrapConf; cache: var WrapCache): CDecl	
visitFunction	hcparse/read_libclang/hc_visitors.html#visitFunction,CXCursor,CScopedIdent,WrapConf	hc_visitors: visitFunction(cursor: CXCursor; parent: CScopedIdent; conf: WrapConf): CDecl	
visitEnum	hcparse/read_libclang/hc_visitors.html#visitEnum,CXCursor,CScopedIdent,WrapConf	hc_visitors: visitEnum(cursor: CXCursor; parent: CScopedIdent; conf: WrapConf): CDecl	
getDefaultAccess	hcparse/read_libclang/hc_visitors.html#getDefaultAccess,CXCursor	hc_visitors: getDefaultAccess(cursor: CXCursor): CX_AccessSpecifier	
isAggregateInitable	hcparse/read_libclang/hc_visitors.html#isAggregateInitable,CXCursor,seq[CArg],WrapConf,WrapCache	hc_visitors: isAggregateInitable(cd: CXCursor; initArgs: var seq[CArg]; conf: WrapConf;\n                    cache: var WrapCache): bool	
updateParentFields	hcparse/read_libclang/hc_visitors.html#updateParentFields,CDecl,WrapConf,WrapCache	hc_visitors: updateParentFields(decl: var CDecl; conf: WrapConf; cache: var WrapCache)	
visitAlias	hcparse/read_libclang/hc_visitors.html#visitAlias,CDecl,CScopedIdent,CXCursor,WrapConf,WrapCache	hc_visitors: visitAlias(lastTypeDecl: var CDecl; parent: CScopedIdent; cursor: CXCursor;\n           conf: WrapConf; cache: var WrapCache): Option[CDecl]	
visitClass	hcparse/read_libclang/hc_visitors.html#visitClass,CXCursor,CScopedIdent,WrapConf,Option[CXCursor],WrapCache	hc_visitors: visitClass(cursor: CXCursor; parent: CScopedIdent; conf: WrapConf;\n           typedef: Option[CXCursor]; cache: var WrapCache): CDecl	
visitNamespace	hcparse/read_libclang/hc_visitors.html#visitNamespace,CXCursor,CScopedIdent,WrapConf,WrapCache	hc_visitors: visitNamespace(cursor: CXCursor; parent: CScopedIdent; conf: WrapConf;\n               cache: var WrapCache): seq[CDecl]	
visitMacrodef	hcparse/read_libclang/hc_visitors.html#visitMacrodef,CXCursor,CScopedIdent,WrapConf	hc_visitors: visitMacrodef(cursor: CXCursor; parent: CScopedIdent; conf: WrapConf): CDecl	
visitCursor	hcparse/read_libclang/hc_visitors.html#visitCursor,CXCursor,CScopedIdent,WrapConf,CDecl,WrapCache	hc_visitors: visitCursor(cursor: CXCursor; parent: CScopedIdent; conf: WrapConf;\n            lastTypeDecl: var CDecl; cache: var WrapCache): tuple[\n    decls: seq[CDecl], recurse: bool]	
splitDeclarations	hcparse/read_libclang/hc_visitors.html#splitDeclarations,CXTranslationUnit,WrapConf,WrapCache	hc_visitors: splitDeclarations(tu: CXTranslationUnit; conf: WrapConf; cache: var WrapCache): CApiUnit	
